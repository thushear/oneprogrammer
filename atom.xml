<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[thushear的角落]]></title>
  <subtitle><![CDATA[养成写博客的好习惯]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-11-09T04:36:20.682Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[thushear]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[nginx和lua开发二]]></title>
    <link href="http://yoursite.com/2015/11/07/lua2/"/>
    <id>http://yoursite.com/2015/11/07/lua2/</id>
    <published>2015-11-07T14:37:18.000Z</published>
    <updated>2015-11-09T04:36:20.682Z</updated>
    <content type="html"><![CDATA[<h1 id="Nginx入门">Nginx入门</h1><p>本文目的是学习Nginx+Lua开发，对于Nginx基本知识可以参考如下文章：</p>
<p>nginx启动、关闭、重启</p>
<p><a href="http://www.cnblogs.com/derekchen/archive/2011/02/17/1957209.html" target="_blank" rel="external">http://www.cnblogs.com/derekchen/archive/2011/02/17/1957209.html</a></p>
<p>agentzh 的 Nginx 教程</p>
<p><a href="http://openresty.org/download/agentzh-nginx-tutorials-zhcn.html" target="_blank" rel="external">http://openresty.org/download/agentzh-nginx-tutorials-zhcn.html</a></p>
<p>Nginx+Lua入门</p>
<p><a href="http://17173ops.com/2013/11/01/17173-ngx-lua-manual.shtml" target="_blank" rel="external">http://17173ops.com/2013/11/01/17173-ngx-lua-manual.shtml</a></p>
<p>nginx 配置指令的执行顺序</p>
<p><a href="http://zhongfox.github.io/blog/server/2013/05/15/nginx-exec-order/" target="_blank" rel="external">http://zhongfox.github.io/blog/server/2013/05/15/nginx-exec-order/</a></p>
<p>nginx与lua的执行顺序和步骤说明</p>
<p><a href="http://www.mrhaoting.com/?p=157" target="_blank" rel="external">http://www.mrhaoting.com/?p=157</a></p>
<p>Nginx配置文件nginx.conf中文详解</p>
<p><a href="http://www.ha97.com/5194.html" target="_blank" rel="external">http://www.ha97.com/5194.html</a></p>
<p>Tengine的Nginx开发从入门到精通</p>
<p><a href="http://tengine.taobao.org/book/" target="_blank" rel="external">http://tengine.taobao.org/book/</a></p>
<p>官方文档</p>
<p><a href="http://wiki.nginx.org/Configuration" target="_blank" rel="external">http://wiki.nginx.org/Configuration</a></p>
<h1 id="Lua入门">Lua入门</h1><p>本文目的是学习Nginx+Lua开发，对于Lua基本知识可以参考如下文章：</p>
<p>Lua简明教程</p>
<p><a href="http://coolshell.cn/articles/10739.html" target="_blank" rel="external">http://coolshell.cn/articles/10739.html</a></p>
<p>lua在线lua学习教程</p>
<p><a href="http://book.luaer.cn/" target="_blank" rel="external">http://book.luaer.cn/</a></p>
<p>Lua 5.1 参考手册</p>
<p><a href="http://www.codingnow.com/2000/download/lua_manual.html" target="_blank" rel="external">http://www.codingnow.com/2000/download/lua_manual.html</a></p>
<p>Lua5.3 参考手册</p>
<p><a href="http://cloudwu.github.io/lua53doc/" target="_blank" rel="external">http://cloudwu.github.io/lua53doc/</a></p>
<h1 id="Nginx_Lua_API">Nginx Lua API</h1><p>和一般的Web Server类似，我们需要接收请求、处理并输出响应。而对于请求我们需要获取如请求参数、请求头、Body体等信息；而对于处理就是调用相应的Lua代码即可；输出响应需要进行响应状态码、响应头和响应内容体的输出。因此我们从如上几个点出发即可。</p>
<h2 id="接收请求">接收请求</h2><p>1、example.conf配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location ~ /lua_request/(\d+)/(\d+) &#123;  </span><br><span class="line">    <span class="comment">#设置nginx变量  </span></span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$a</span> <span class="variable">$1</span>;   </span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$b</span> <span class="variable">$host</span>;  </span><br><span class="line">    default_<span class="built_in">type</span> <span class="string">"text/html"</span>;  </span><br><span class="line">    <span class="comment">#nginx内容处理  </span></span><br><span class="line">    content_by_lua_file /usr/example/lua/<span class="built_in">test</span>_request.lua;  </span><br><span class="line">    <span class="comment">#内容体处理完成后调用  </span></span><br><span class="line">    <span class="built_in">echo</span>_after_body <span class="string">"ngx.var.b <span class="variable">$b</span>"</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2 test_request.lua </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">--nginx变量</span><br><span class="line"><span class="built_in">local</span> var = ngx.var</span><br><span class="line">ngx.say(<span class="string">"ngx.var.a : "</span>, var.a, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"ngx.var.b : "</span>, var.b, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"ngx.var[2] : "</span>, var[<span class="number">2</span>], <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">ngx.var.b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">ngx.say(<span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line"></span><br><span class="line">--请求头</span><br><span class="line"><span class="built_in">local</span> headers = ngx.req.get_headers()</span><br><span class="line">ngx.say(<span class="string">"headers begin"</span>, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"Host : "</span>, headers[<span class="string">"Host"</span>], <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"user-agent : "</span>, headers[<span class="string">"user-agent"</span>], <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"user-agent : "</span>, headers.user_agent, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> pairs(headers) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">        ngx.say(k, <span class="string">" : "</span>, table.concat(v, <span class="string">","</span>), <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ngx.say(k, <span class="string">" : "</span>, v, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">ngx.say(<span class="string">"headers end"</span>, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line"></span><br><span class="line">--get请求uri参数</span><br><span class="line">ngx.say(<span class="string">"uri args begin"</span>, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line"><span class="built_in">local</span> uri_args = ngx.req.get_uri_args()</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> pairs(uri_args) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">        ngx.say(k, <span class="string">" : "</span>, table.concat(v, <span class="string">", "</span>), <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ngx.say(k, <span class="string">": "</span>, v, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">ngx.say(<span class="string">"uri args end"</span>, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line"></span><br><span class="line">--post请求参数</span><br><span class="line">ngx.req.read_body()</span><br><span class="line">ngx.say(<span class="string">"post args begin"</span>, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line"><span class="built_in">local</span> post_args = ngx.req.get_post_args()</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> pairs(post_args) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">        ngx.say(k, <span class="string">" : "</span>, table.concat(v, <span class="string">", "</span>), <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ngx.say(k, <span class="string">": "</span>, v, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">ngx.say(<span class="string">"post args end"</span>, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line"></span><br><span class="line">--请求的http协议版本</span><br><span class="line">ngx.say(<span class="string">"ngx.req.http_version : "</span>, ngx.req.http_version(), <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">--请求方法</span><br><span class="line">ngx.say(<span class="string">"ngx.req.get_method : "</span>, ngx.req.get_method(), <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">--原始的请求头内容</span><br><span class="line">ngx.say(<span class="string">"ngx.req.raw_header : "</span>,  ngx.req.raw_header(), <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">--请求的body内容体</span><br><span class="line">ngx.say(<span class="string">"ngx.req.get_body_data() : "</span>, ngx.req.get_body_data(), <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"&lt;br/&gt;"</span>)</span><br></pre></td></tr></table></figure>
<hr>
<p>ngx.var ： nginx变量，如果要赋值如ngx.var.b = 2，此变量必须提前声明；另外对于nginx location中使用正则捕获的捕获组可以使用ngx.var[捕获组数字]获取；</p>
<p>ngx.req.get_headers：获取请求头，默认只获取前100，如果想要获取所以可以调用ngx.req.get_headers(0)；获取带中划线的请求头时请使用如headers.user_agent这种方式；如果一个请求头有多个值，则返回的是table；</p>
<p>ngx.req.get_uri_args：获取url请求参数，其用法和get_headers类似；</p>
<p>ngx.req.get_post_args：获取post请求内容体，其用法和get_headers类似，但是必须提前调用ngx.req.read_body()来读取body体（也可以选择在nginx配置文件使用lua_need_request_body on;开启读取body体，但是官方不推荐）；</p>
<p>ngx.req.raw_header：未解析的请求头字符串；</p>
<p>ngx.req.get_body_data：为解析的请求body体内容字符串。</p>
<p>如上方法处理一般的请求基本够用了。另外在读取post内容体时根据实际情况设置client_body_buffer_size和client_max_body_size来保证内容在内存而不是在文件中。</p>
<p>使用如下脚本测试  </p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --post-data <span class="string">'a</span>=<span class="number">1</span>&amp;b=<span class="number">2</span><span class="string">' '</span>http:<span class="comment">//127.0.0.1/lua_request/1/2?a=3&amp;b=4'</span></span><br></pre></td></tr></table></figure>
<h2 id="输出响应">输出响应</h2><p>example.conf配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /lua_response_1 &#123;  </span><br><span class="line">    default_<span class="built_in">type</span> <span class="string">"text/html"</span>;  </span><br><span class="line">    content_by_lua_file /usr/example/lua/<span class="built_in">test</span>_response_1.lua;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<pre><code>test_response_1.lua 
<span class="comment"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    --写响应头  </span><br><span class="line">ngx.header.a = <span class="string">"1"</span>  </span><br><span class="line">--多个响应头可以使用table  </span><br><span class="line">ngx.header.b = &#123;<span class="string">"2"</span>, <span class="string">"3"</span>&#125;  </span><br><span class="line">--输出响应  </span><br><span class="line">ngx.say(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">ngx.print(<span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">--<span class="number">200</span>状态码退出  </span><br><span class="line"><span class="built_in">return</span> ngx.exit(<span class="number">200</span>)</span><br></pre></td></tr></table></figure></span>


ngx.header：输出响应头；
</code></pre><p><em>ngx.print：输出响应内容体；</em></p>
<p>ngx.say：通ngx.print，但是会最后输出一个换行符；</p>
<p><em>ngx.exit：指定状态码退出。</em></p>
<pre><code><span class="tag">example</span><span class="class">.conf</span>配置文件
</code></pre>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  location /lua_response_2 &#123;  </span><br><span class="line">    default_<span class="built_in">type</span> <span class="string">"text/html"</span>;  </span><br><span class="line">    content_by_lua_file /usr/example/lua/<span class="built_in">test</span>_response_2.lua;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test_response_2.lua<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx.redirect(<span class="string">"http://jd.com"</span>, <span class="number">302</span>)</span><br></pre></td></tr></table></figure></p>
<p>ngx.redirect：重定向； </p>
<p>ngx.status=状态码，设置响应的状态码；ngx.resp.get_headers()获取设置的响应状态码；ngx.send_headers()发送响应状态码，当调用ngx.say/ngx.print时自动发送响应状态码；可以通过ngx.headers_sent=true判断是否发送了响应状态码。</p>
<p>其他API</p>
<p>1、example.conf配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /lua_other &#123;  </span><br><span class="line">    default_<span class="built_in">type</span> <span class="string">"text/html"</span>;  </span><br><span class="line">    content_by_lua_file /usr/example/lua/<span class="built_in">test</span>_other.lua;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test_other.lua<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--未经解码的请求uri  </span><br><span class="line"><span class="built_in">local</span> request_uri = ngx.var.request_uri;  </span><br><span class="line">ngx.say(<span class="string">"request_uri : "</span>, request_uri, <span class="string">"&lt;br/&gt;"</span>);  </span><br><span class="line">--解码  </span><br><span class="line">ngx.say(<span class="string">"decode request_uri : "</span>, ngx.unescape_uri(request_uri), <span class="string">"&lt;br/&gt;"</span>);  </span><br><span class="line">--MD5  </span><br><span class="line">ngx.say(<span class="string">"ngx.md5 : "</span>, ngx.md5(<span class="string">"123"</span>), <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">--http time  </span><br><span class="line">ngx.say(<span class="string">"ngx.http_time : "</span>, ngx.http_time(ngx.time()), <span class="string">"&lt;br/&gt;"</span>)</span><br></pre></td></tr></table></figure></p>
<p>ngx.escape_uri/ngx.unescape_uri ： uri编码解码；</p>
<p>ngx.encode_args/ngx.decode_args：参数编码解码；</p>
<p>ngx.encode_base64/ngx.decode_base64：BASE64编码解码；</p>
<p>ngx.re.match：nginx正则表达式匹配；</p>
<p>更多Nginx Lua API请参考 <a href="http://wiki.nginx.org/HttpLuaModule#Nginx_API_for_Lua。" target="_blank" rel="external">http://wiki.nginx.org/HttpLuaModule#Nginx_API_for_Lua。</a></p>
<h2 id="Nginx全局内存">Nginx全局内存</h2><p>使用过如Java的朋友可能知道如Ehcache等这种进程内本地缓存，Nginx是一个Master进程多个Worker进程的工作方式，因此我们可能需要在多个Worker进程中共享数据，那么此时就可以使用ngx.shared.DICT来实现全局内存共享。</p>
<p>1、首先在nginx.conf的http部分分配内存大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#共享全局变量，在所有worker间共享  </span></span><br><span class="line">lua_shared_dict shared_data <span class="number">1</span>m;</span><br></pre></td></tr></table></figure></p>
<p>2、example.conf配置文件<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /lua_shared_dict &#123;  </span><br><span class="line">    default_<span class="built_in">type</span> <span class="string">"text/html"</span>;  </span><br><span class="line">    content_by_lua_file /usr/example/lua/<span class="built_in">test</span>_lua_shared_dict.lua;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3、 test_lua_shared_dict.lua<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">--<span class="number">1</span>、获取全局共享内存变量  </span><br><span class="line"><span class="built_in">local</span> shared_data = ngx.shared.shared_data  </span><br><span class="line">  </span><br><span class="line">--<span class="number">2</span>、获取字典值  </span><br><span class="line"><span class="built_in">local</span> i = shared_data:get(<span class="string">"i"</span>)  </span><br><span class="line"><span class="keyword">if</span> not i <span class="keyword">then</span>  </span><br><span class="line">    i = <span class="number">1</span>  </span><br><span class="line">    --<span class="number">3</span>、惰性赋值  </span><br><span class="line">    shared_data:<span class="built_in">set</span>(<span class="string">"i"</span>, i)  </span><br><span class="line">    ngx.say(<span class="string">"lazy set i "</span>, i, <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">end  </span><br><span class="line">--递增  </span><br><span class="line">i = shared_data:incr(<span class="string">"i"</span>, <span class="number">1</span>)  </span><br><span class="line">ngx.say(<span class="string">"i="</span>, i, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">``` </span><br><span class="line">更多API请参考http://wiki.nginx.org/HttpLuaModule<span class="comment">#ngx.shared.DICT。 </span></span><br><span class="line">到此基本的Nginx Lua API就学完了，对于请求处理和输出响应如上介绍的API完全够用了，更多API请参考官方文档。</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx Lua模块指令</span></span><br><span class="line"></span><br><span class="line">Nginx共<span class="number">11</span>个处理阶段，而相应的处理阶段是可以做插入式处理，即可插拔式架构；另外指令可以在http、server、server <span class="keyword">if</span>、location、location <span class="keyword">if</span>几个范围进行配置：</span><br><span class="line"></span><br><span class="line">更详细的解释请参考http://wiki.nginx.org/HttpLuaModule<span class="comment">#Directives。如上指令很多并不常用，因此我们只拿其中的一部分做演示</span></span><br><span class="line"><span class="comment">## init_by_lua</span></span><br><span class="line"></span><br><span class="line">每次Nginx重新加载配置时执行，可以用它来完成一些耗时模块的加载，或者初始化一些全局配置；在Master进程创建Worker进程时，此指令中加载的全局变量会进行Copy-OnWrite，即会复制到所有全局变量到Worker进程。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、nginx.conf配置文件中的http部分添加如下代码</span><br><span class="line">``` bash</span><br><span class="line">    <span class="comment">#共享全局变量，在所有worker间共享  </span></span><br><span class="line">    lua_shared_dict shared_data <span class="number">1</span>m;  </span><br><span class="line">      </span><br><span class="line">    init_by_lua_file /usr/example/lua/init.lua;</span><br></pre></td></tr></table></figure></p>
<p>2、init.lua</p>
<pre><code> 初始化耗时的模块  
 <span class="built_in">local</span> redis = <span class="built_in">require</span> <span class="string">'resty.redis'</span>  
<span class="built_in">local</span> cjson = <span class="built_in">require</span> <span class="string">'cjson'</span>  

全局变量，不推荐  
count = <span class="number">1</span>  

共享全局内存  
<span class="built_in">local</span> shared_data = ngx.shared.shared_data  
shared_data:<span class="built_in">set</span>(<span class="string">"count"</span>, <span class="number">1</span>)  &lt;!<span class="comment">--￼12--&gt;</span>

<span class="built_in">local</span> count = <span class="number">0</span>  
<span class="built_in">local</span> delayInSeconds = <span class="number">3</span>  
<span class="built_in">local</span> heartbeatCheck = nil  

heartbeatCheck = <span class="function"><span class="keyword">function</span>(<span class="title">args</span>)  </span>
   count = count + <span class="number">1</span>  
   ngx.<span class="built_in">log</span>(ngx.ERR, <span class="string">"do check "</span>, count)  

   <span class="built_in">local</span> ok, err = ngx.timer.<span class="keyword">at</span>(delayInSeconds, heartbeatCheck)  

   <span class="keyword">if</span> <span class="operator">not</span> ok <span class="keyword">then</span>  
      ngx.<span class="built_in">log</span>(ngx.ERR, <span class="string">"failed to startup heartbeart worker..."</span>, err)  
   <span class="function"><span class="keyword">end</span>  
<span class="title">end</span>  </span>

heartbeatCheck()  
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ngx.timer.at：延时调用相应的回调方法；ngx.timer.at(秒单位延时，回调函数，回调函数的参数列表)；可以将延时设置为<span class="number">0</span>即得到一个立即执行的任务，任务不会在当前请求中执行不会阻塞当前请求，而是在一个轻量级线程中执行。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">另外根据实际情况设置如下指令</span><br><span class="line"></span><br><span class="line">lua_max_pending_timers <span class="number">1024</span>;  <span class="preprocessor">#最大等待任务数</span></span><br><span class="line"></span><br><span class="line">lua_max_running_timers <span class="number">256</span>;    <span class="preprocessor">#最大同时运行任务数</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## set_by_lua </span></span><br><span class="line"></span><br><span class="line">设置nginx变量，我们用的<span class="built_in">set</span>指令即使配合<span class="keyword">if</span>指令也很难实现复杂的赋值逻辑；</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">1.1</span>、example.conf配置文件</span><br></pre></td></tr></table></figure>
<pre><code>location /lua_set_1 {  
    default_type <span class="string">"text/html"</span>;  
    set_by_lua_file <span class="variable">$num</span> /usr/example/lua/test_set_1.lua;  
    echo <span class="variable">$num</span>;  
}  
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>_by_lua_file：语法<span class="built_in">set</span>_by_lua_file <span class="variable">$var</span> lua_file arg1 arg2...; 在lua代码中可以实现所有复杂的逻辑，但是要执行速度很快，不要阻塞；</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">1.2</span>、<span class="built_in">test</span>_<span class="built_in">set</span>_1.lua</span><br></pre></td></tr></table></figure>
<pre><code>local uri_args = ngx<span class="class">.req</span><span class="class">.get_uri_args</span>()  
local <span class="tag">i</span> = uri_args[<span class="string">"i"</span>] or <span class="number">0</span>  
local j = uri_args[<span class="string">"j"</span>] or <span class="number">0</span>  

return <span class="tag">i</span> + j  
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">得到请求参数进行相加然后返回。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">访问如http:<span class="comment">//192.168.1.2/lua_set_1?i=1&amp;j=10进行测试。 如果我们用纯set指令是无法实现的。</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">再举个实际例子，我们实际工作时经常涉及到网站改版，有时候需要新老并存，或者切一部分流量到新版</span><br><span class="line"></span><br><span class="line"><span class="number">2.1</span>、首先在example.conf中使用<span class="built_in">map</span>指令来映射host到指定nginx变量，方便我们测试</span><br></pre></td></tr></table></figure>
<pre><code><span class="preprocessor">############ 测试时使用的动态请求  </span>
map <span class="variable">$host</span> <span class="variable">$item_dynamic</span> {  
    <span class="keyword">default</span>                     <span class="string">"0"</span><span class="comment">;  </span>
    xxx.com            <span class="string">"1"</span><span class="comment">;  </span>
}  
</code></pre><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此时我们想访问item2014<span class="class">.jd</span><span class="class">.com</span>时访问新版，那么我们可以简单的使用如</span><br></pre></td></tr></table></figure>
<pre><code><span class="keyword">if</span> (<span class="variable">$item</span>_dynamic = <span class="string">"1"</span>) {  
   proxy_pass http://new;  
}  
proxy_pass http://old;  
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是我们想把商品编号为为<span class="number">8</span>位(比如品类为图书的)没有改版完成，需要按照相应规则跳转到老版，但是其他的到新版；虽然使用<span class="keyword">if</span>指令能实现，但是比较麻烦，基本需要这样</span><br></pre></td></tr></table></figure>
<pre><code><span class="keyword">set</span> jump <span class="string">"0"</span>;  
<span class="keyword">if</span>(<span class="variable">$item_dynamic</span> = <span class="string">"1"</span>) {  
    <span class="keyword">set</span> <span class="variable">$jump</span> <span class="string">"1"</span>;  
}  
<span class="keyword">if</span>(uri ~ <span class="string">"^/6[0-9]{7}.html"</span>) {  
   <span class="keyword">set</span> <span class="variable">$jump</span> <span class="string">"${jump}2"</span>;  
}  
<span class="comment">#非强制访问新版，且访问指定范围的商品  </span>
<span class="keyword">if</span> (jump == <span class="string">"02"</span>) {  
   proxy_pass <span class="keyword">http</span>://old;  
}  
proxy_pass <span class="keyword">http</span>://new;  
</code></pre><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">以上规则还是比较简单的，如果涉及到更复杂的多重<span class="keyword">if</span>/<span class="keyword">else</span>或嵌套<span class="keyword">if</span>/<span class="keyword">else</span>实现起来就更痛苦了，可能需要到后端去做了；此时我们就可以借助<span class="keyword">lua</span>了：</span><br></pre></td></tr></table></figure>
<pre><code>set_by_lua $to_book '  
     <span class="keyword">local</span> ngx_match = ngx.re.<span class="keyword">match</span>  
     <span class="keyword">local</span> <span class="keyword">var</span> = ngx.<span class="keyword">var</span>  
     <span class="keyword">local</span> skuId = <span class="keyword">var</span>.skuId  
     <span class="keyword">local</span> r = <span class="keyword">var</span>.item_dynamic ~= <span class="string">"1"</span> and ngx.re.<span class="keyword">match</span>(skuId, <span class="string">"^[0-9]{8}$"</span>)  
     <span class="keyword">if</span> r <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">"1"</span> <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">"0"</span> end;  
';  
set_by_lua $to_mvd '  
     <span class="keyword">local</span> ngx_match = ngx.re.<span class="keyword">match</span>  
     <span class="keyword">local</span> <span class="keyword">var</span> = ngx.<span class="keyword">var</span>  
     <span class="keyword">local</span> skuId = <span class="keyword">var</span>.skuId  
     <span class="keyword">local</span> r = <span class="keyword">var</span>.item_dynamic ~= <span class="string">"1"</span> and ngx.re.<span class="keyword">match</span>(skuId, <span class="string">"^[0-9]{9}$"</span>)  
     <span class="keyword">if</span> r <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">"1"</span> <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">"0"</span> end;  
';  
<span class="comment">#自营图书  </span>
<span class="keyword">if</span> ($to_book) {  
    proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/old_book/$skuId.html;  
}  
<span class="comment">#自营音像  </span>
<span class="keyword">if</span> ($to_mvd) {  
    proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/old_mvd/$skuId.html;  
}  
<span class="comment">#默认  </span>
proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/proxy/$skuId.html;  
</code></pre><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## rewrite_by_lua </span></span><br><span class="line"></span><br><span class="line">执行内部<span class="built_in">URL</span>重写或者外部重定向，典型的如伪静态化的<span class="built_in">URL</span>重写。其默认执行在rewrite处理阶段的最后。</span><br><span class="line"></span><br><span class="line"><span class="number">1.1</span>、example.conf配置文件</span><br></pre></td></tr></table></figure>
<pre><code><span class="xml">location /lua_rewrite_1 </span><span class="expression">{  
    <span class="variable"><span class="keyword">default</span></span>_<span class="variable">type</span> <span class="string">"text/html"</span>;  
    <span class="variable">rewrite</span>_<span class="variable">by</span>_<span class="variable">lua</span>_<span class="variable">file</span> <span class="end-block">/usr</span><span class="end-block">/example</span><span class="end-block">/lua</span><span class="end-block">/test</span>_<span class="variable">rewrite</span>_1<span class="variable">.lua</span>;  
    <span class="variable">echo</span> <span class="string">"no rewrite"</span>;  
}</span><span class="xml">  </span>
</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="class">.2</span>、<span class="tag">test_rewrite_1</span><span class="class">.lua</span></span><br></pre></td></tr></table></figure>
<pre><code><span class="keyword">if</span> ngx.req.get_uri_args()[<span class="string">"jump"</span>] == <span class="string">"1"</span> <span class="keyword">then</span>  
   <span class="constant">return</span> ngx.redirect(<span class="string">"http://www.jd.com?jump=1"</span>, <span class="number">302</span>)  
<span class="function"><span class="keyword">end</span>  </span>
</code></pre><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当我们请求http://<span class="number">192.168.1.2</span>/lua_rewrite_1时发现没有跳转，而请求http://<span class="number">192.168.1.2</span>/lua_rewrite_1?jump=1时发现跳转到京东首页了。 此处需要<span class="number">301/302</span>跳转根据自己需求定义</span><br><span class="line"></span><br><span class="line">2.1、example.conf配置文件</span><br></pre></td></tr></table></figure>
<pre><code><span class="title">location</span> /lua_rewrite_2 {  
    <span class="title">default_type</span> <span class="string">"text/html"</span>;  
    <span class="title">rewrite_by_lua_file</span> /usr/example/lua/test_rewrite_2.lua;  
    <span class="title">echo</span> <span class="string">"rewrite2 uri : <span class="variable">$uri</span>, a : <span class="variable">$arg_a</span>"</span>;  
}  
</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2<span class="class">.2</span>、<span class="tag">test_rewrite_2</span><span class="class">.lua</span></span><br></pre></td></tr></table></figure>
<pre><code><span class="keyword">if</span> ngx.req.get_uri_args()[<span class="string">"jump"</span>] == <span class="string">"1"</span> <span class="keyword">then</span>  
   ngx.req.set_uri(<span class="string">"/lua_rewrite_3"</span>, <span class="constant">false</span>);  
   ngx.req.set_uri(<span class="string">"/lua_rewrite_4"</span>, <span class="constant">false</span>);  
   ngx.req.set_uri_args({<span class="operator">a</span> = <span class="number">1</span>, b = <span class="number">2</span>});  
<span class="function"><span class="keyword">end</span>   </span>
</code></pre><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ngx<span class="class">.req</span><span class="class">.set_uri</span>(uri, false)：可以内部重写uri（可以带参数），等价于 rewrite ^ /lua_rewrite_3；通过配合<span class="keyword">if</span>/<span class="keyword">else</span>可以实现 rewrite ^ /lua_rewrite_3 break；这种功能；此处两者都是location内部url重写，不会重新发起新的location匹配；</span><br><span class="line"></span><br><span class="line">ngx<span class="class">.req</span><span class="class">.set_uri_args</span>：重写请求参数，可以是字符串(a=<span class="number">1</span>&amp;b=<span class="number">2</span>)也可以是table；</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">访问如http:<span class="comment">//192.168.1.2/lua_rewrite_2?jump=0时得到响应</span></span><br><span class="line"></span><br><span class="line">rewrite2 uri : /lua_rewrite_2, <span class="tag">a</span> :</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">访问如http:<span class="comment">//192.168.1.2/lua_rewrite_2?jump=1时得到响应</span></span><br><span class="line"></span><br><span class="line">rewrite2 uri : /lua_rewrite_4, <span class="tag">a</span> : <span class="number">1</span></span><br><span class="line"><span class="number">3.1</span>、example.conf配置文件</span><br></pre></td></tr></table></figure>
<pre><code><span class="xml">location /lua_rewrite_3 </span><span class="expression">{  
    <span class="variable"><span class="keyword">default</span></span>_<span class="variable">type</span> <span class="string">"text/html"</span>;  
    <span class="variable">rewrite</span>_<span class="variable">by</span>_<span class="variable">lua</span>_<span class="variable">file</span> <span class="end-block">/usr</span><span class="end-block">/example</span><span class="end-block">/lua</span><span class="end-block">/test</span>_<span class="variable">rewrite</span>_3<span class="variable">.lua</span>;  
    <span class="variable">echo</span> <span class="string">"rewrite3 uri : $uri"</span>;  
}</span><span class="xml">  </span>
</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3<span class="class">.2</span>、<span class="tag">test_rewrite_3</span><span class="class">.lua</span></span><br></pre></td></tr></table></figure>
<pre><code><span class="keyword">if</span> ngx.req.get_uri_args()[<span class="string">"jump"</span>] == <span class="string">"1"</span> <span class="keyword">then</span>  
   ngx.req.set_uri(<span class="string">"/lua_rewrite_4"</span>, <span class="constant">true</span>);  
   ngx.<span class="built_in">log</span>(ngx.ERR, <span class="string">"========="</span>)  
   ngx.req.set_uri_args({<span class="operator">a</span> = <span class="number">1</span>, b = <span class="number">2</span>});  
<span class="function"><span class="keyword">end</span>  </span>
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ngx.req.set_uri(uri, <span class="literal">true</span>)：可以内部重写uri，即会发起新的匹配location请求，等价于 rewrite ^ /lua_rewrite_4 last；此处看error <span class="built_in">log</span>是看不到我们记录的<span class="built_in">log</span>。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">所以请求如http:<span class="comment">//192.168.1.2/lua_rewrite_3?jump=1会到新的location中得到响应，此处没有/lua_rewrite_4，所以匹配到/lua请求，得到类似如下的响应</span></span><br><span class="line"></span><br><span class="line">global variable : <span class="number">2</span> , shared memory : <span class="number">1</span> hello world</span><br><span class="line">即</span><br><span class="line"></span><br><span class="line">rewrite ^ /lua_rewrite_3;                 等价于  ngx.req.set_uri(<span class="string">"/lua_rewrite_3"</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">rewrite ^ /lua_rewrite_3 <span class="keyword">break</span>;       等价于  ngx.req.set_uri(<span class="string">"/lua_rewrite_3"</span>, <span class="literal">false</span>); 加 <span class="keyword">if</span>/<span class="keyword">else</span>判断/<span class="keyword">break</span>/<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">rewrite ^ /lua_rewrite_4 last;           等价于  ngx.req.set_uri(<span class="string">"/lua_rewrite_4"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">注意，在使用rewrite_by_lua时，开启rewrite_log on;后也看不到相应的rewrite <span class="built_in">log</span>。</span><br><span class="line"><span class="preprocessor">## access_by_lua </span></span><br><span class="line"></span><br><span class="line">用于访问控制，比如我们只允许内网ip访问，可以使用如下形式</span><br></pre></td></tr></table></figure>
<p>allow     127.0.0.1;<br>allow     10.0.0.0/8;<br>allow     192.168.0.0/16;<br>allow     172.16.0.0/12;<br>deny      all;<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="class">.1</span>、<span class="tag">example</span><span class="class">.conf</span>配置文件</span><br></pre></td></tr></table></figure></p>
<pre><code><span class="xml">location /lua_access </span><span class="expression">{  
    <span class="variable"><span class="keyword">default</span></span>_<span class="variable">type</span> <span class="string">"text/html"</span>;  
    <span class="variable">access</span>_<span class="variable">by</span>_<span class="variable">lua</span>_<span class="variable">file</span> <span class="end-block">/usr</span><span class="end-block">/example</span><span class="end-block">/lua</span><span class="end-block">/test</span>_<span class="variable">access.lua</span>;  
    <span class="variable">echo</span> <span class="string">"access"</span>;  
}</span><span class="xml">  </span>
</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="class">.2</span>、<span class="tag">test_access</span><span class="class">.lua</span></span><br></pre></td></tr></table></figure>
<pre><code><span class="keyword">if</span> ngx.req.get_uri_args()[<span class="string">"token"</span>] ~= <span class="string">"123"</span> <span class="keyword">then</span>  
<span class="command">   return</span> ngx.<span class="keyword">exit</span>(<span class="number">403</span>)  
<span class="keyword">end</span>  
</code></pre><p>```</p>
<p>即如果访问如<a href="http://192.168.1.2/lua_access?token=234将得到403" target="_blank" rel="external">http://192.168.1.2/lua_access?token=234将得到403</a> Forbidden的响应。这样我们可以根据如cookie/用户token来决定是否有访问权限。</p>
<h2 id="content_by_lua">content_by_lua</h2><p>此指令之前已经用过了，此处就不讲解了。</p>
<p>另外在使用PCRE进行正则匹配时需要注意正则的写法，具体规则请参考<a href="http://wiki.nginx.org/HttpLuaModule中的Special" target="_blank" rel="external">http://wiki.nginx.org/HttpLuaModule中的Special</a> PCRE Sequences部分。还有其他的注意事项也请阅读官方文档。</p>
<p>转载 <a href="http://jinnianshilongnian.iteye.com/blog/2186448" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/2186448</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Nginx入门">Nginx入门</h1><p>本文目的是学习Nginx+Lua开发，对于Nginx基本知识可以参考如下文章：</p>
<p>nginx启动、关闭、重启</p>
<p><a href="http://www.cnblogs.com/derekche]]>
    </summary>
    
      <category term="lua" scheme="http://yoursite.com/tags/lua/"/>
    
      <category term="lua" scheme="http://yoursite.com/categories/lua/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginx和lua开发一]]></title>
    <link href="http://yoursite.com/2015/11/07/lua1/"/>
    <id>http://yoursite.com/2015/11/07/lua1/</id>
    <published>2015-11-07T11:26:33.000Z</published>
    <updated>2015-11-07T14:31:49.266Z</updated>
    <content type="html"><![CDATA[<h1 id="环境">环境</h1><p>安装环境<br>安装步骤可以参考<a href="http://openresty.org/#Installation。" target="_blank" rel="external">http://openresty.org/#Installation。</a></p>
<h2 id="系统:_Centos">系统: Centos</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//openresty.org/download/ngx_openresty-1.7.7.2.tar.gz</span></span><br><span class="line"> yum install readline-devel pcre-devel openssl-devel </span><br><span class="line"> tar xzvf ngx_openresty-<span class="number">1.7</span><span class="number">.7</span><span class="number">.2</span>.tar.gz </span><br><span class="line"> cd ngx_openresty-<span class="number">1.7</span><span class="number">.7</span><span class="number">.2</span></span><br><span class="line">  cd bundle/LuaJIT-<span class="number">2.1</span>-<span class="number">20150120</span>/</span><br><span class="line">  make clean &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="下载ngx_cache_purge模块，该模块用于清理nginx缓存">下载ngx_cache_purge模块，该模块用于清理nginx缓存</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/servers/ngx_openresty-<span class="number">1.7</span><span class="number">.7</span><span class="number">.2</span>/bundle</span><br><span class="line">wget https:<span class="comment">//github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz</span></span><br><span class="line">tar -xvf <span class="number">2.3</span>.tar.gz</span><br></pre></td></tr></table></figure>
<p>下载nginx_upstream_check_module模块，该模块用于upstream健康检查<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/servers/ngx_openresty-<span class="number">1.7</span><span class="number">.7</span><span class="number">.2</span>/bundle</span><br><span class="line">wget https:<span class="comment">//github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz</span></span><br><span class="line">tar -xvf v0<span class="number">.3</span><span class="number">.0</span>.tar.gz</span><br></pre></td></tr></table></figure></p>
<h2 id="安装ngx_openresty">安装ngx_openresty</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/servers/ngx_openresty-<span class="number">1.7</span>.<span class="number">7.2</span>  </span><br><span class="line">./configure --prefix=/usr/servers --<span class="keyword">with</span>-http_realip_module  --<span class="keyword">with</span>-pcre  --<span class="keyword">with</span>-luajit --<span class="keyword">add</span>-<span class="keyword">module</span>=./bundle/ngx_cache_purge-<span class="number">2.3</span>/ --<span class="keyword">add</span>-<span class="keyword">module</span>=./bundle/nginx_upstream_check_module-<span class="number">0.3</span>.<span class="number">0</span>/ -j2  </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>下载nginx(nginx-1.2.4.tar.g)   <a href="http://nginx.org/" target="_blank" rel="external">http://nginx.org/</a><br>下载pcre(pcre-8.31.tar.gz)    <a href="http://pcre.org/" target="_blank" rel="external">http://pcre.org/</a></p>
<p>如果报错: <strong>undefined reference to `pcre_free_study’</strong></p>
<p>下周<br><a href="http://exim.mirror.fr/pcre/" target="_blank" rel="external">http://exim.mirror.fr/pcre/</a><br>执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf pcre-<span class="number">8.31</span>.tar.gz</span><br><span class="line">cd pcre-<span class="number">8.31</span></span><br><span class="line">./congigure</span><br><span class="line">make</span><br><span class="line">make install </span><br><span class="line">/configure --prefix=<span class="regexp">/usr/</span>servers --<span class="keyword">with</span>-http_realip_module  --<span class="keyword">with</span>-pcre  --<span class="keyword">with</span>-luajit --add-<span class="built_in">module</span>=./bundle/ngx_cache_purge-<span class="number">2.3</span>/ --add-<span class="built_in">module</span>=./bundle/nginx_upstream_check_module-<span class="number">0.3</span><span class="number">.0</span>/ --<span class="keyword">with</span>-pcre=<span class="regexp">/export/</span>servers/pcre-<span class="number">8.31</span>  -j2</span><br></pre></td></tr></table></figure></p>
<p>命令含义<br>–with<em>*</em> 安装一些内置/集成的模块<br>–with-http_realip_module 取用户真实ip模块<br>-with-pcre Perl兼容的达式模块<br>–with-luajit 集成luajit模块<br>–add-module 添加自定义的第三方模块，如此次的ngx_che_purge</p>
<p>到/usr/servers目录下<br><code>cd /usr/servers/
ll</code></p>
<p>会发现多出来了如下目录，说明安装成功<br>/usr/servers/luajit ：luajit环境，luajit类似于java的jit，即即时编译，lua是一种解释语言，通过luajit可以即时编译<br>lua代码到机器代码，得到很好的性能；<br>/usr/servers/lualib：要使用的lua库，里边提供了一些默认的lua库，如redis，json库等，也可以把一些自己开发的<br>或第三方的放在这；<br>/usr/servers/nginx ：安装的nginx；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -V</span><br><span class="line">启动nginx</span><br><span class="line">/usr/servers/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></p>
<h1 id="配置环境">配置环境</h1><p>配置及Nginx HttpLuaModule文档在可以查看<a href="http://wiki.nginx.org/HttpLuaModule。" target="_blank" rel="external">http://wiki.nginx.org/HttpLuaModule。</a></p>
<h2 id="编辑nginx-conf配置文件">编辑nginx.conf配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/servers/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p>2、在http部分添加如下配置</p>
<p>#lua模块路径，多个之间”;”分隔，其中”;;”表示默认搜索路径，默认到/usr/servers/nginx下找<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lua_package_path <span class="string">"/usr/servers/lualib/?.lua;;"</span>; <span class="comment">#lua 模块</span></span><br><span class="line">lua_package_cpath <span class="string">"/usr/servers/lualib/?.so;;"</span>; <span class="comment">#c模块</span></span><br></pre></td></tr></table></figure></p>
<p>3、为了方便开发我们在/usr/servers/nginx/conf目录下创建一个lua.conf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lua.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name _;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4、在nginx.conf中的http部分添加include lua.conf包含此文件片段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include lua.conf;</span><br></pre></td></tr></table></figure></p>
<p>5、测试是否正常<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure></p>
<p>HelloWorld<br>1、在lua.conf中server部分添加如下配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /lua &#123;</span><br><span class="line">default_<span class="built_in">type</span> <span class="string">'text/html'</span>;</span><br><span class="line">content_by_lua <span class="string">'ngx.say("hello world")'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2、测试配置是否正确<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure></p>
<p>3、重启nginx<br>/usr/servers/nginx/sbin/nginx -s reload<br>4、访问如<a href="http://ip/lua（自己的机器根据实际情况换ip），可以看到如下内容" target="_blank" rel="external">http://ip/lua（自己的机器根据实际情况换ip），可以看到如下内容</a><br>hello world<br>5、lua代码文件<br>我们把lua代码放在nginx配置中会随着lua的代码的增加导致配置文件太长不好维护，因此我们应该把lua代码移到外部<br>文件中存储。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/servers/nginx/conf/lua/test.lua</span><br><span class="line"><span class="comment">#添加如下内容</span></span><br><span class="line">ngx.say(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure></p>
<p>然后lua.conf修改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /lua &#123;</span><br><span class="line">default_<span class="built_in">type</span> <span class="string">'text/html'</span>;</span><br><span class="line">content_by_lua_file conf/lua/test.lua; <span class="comment">#相对于nginx安装目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后lua.conf修改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /lua &#123;</span><br><span class="line">default_<span class="built_in">type</span> <span class="string">'text/html'</span>;</span><br><span class="line">content_by_lua_file conf/lua/test.lua; <span class="comment">#相对于nginx安装目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>6、lua_code_cache<br>默认情况下lua_code_cache 是开启的，即缓存lua代码，即每次lua代码变更必须reload nginx才生效，如果在开发阶<br>段可以通过lua_code_cache off;关闭缓存，这样调试时每次修改lua代码不需要reload nginx；但是正式环境一定记得<br>开启缓存。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /lua &#123;</span><br><span class="line">default_<span class="built_in">type</span> <span class="string">'text/html'</span>;</span><br><span class="line">lua_code_cache off;</span><br><span class="line">content_by_lua_file conf/lua/test.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>7、错误日志<br>如果运行过程中出现错误，请不要忘记查看错误日志。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">tail <span class="operator">-f</span> /usr/servers/nginx/logs/error.log</span><br><span class="line">``` </span><br><span class="line"><span class="comment">## nginx+lua项目构建</span></span><br><span class="line">以后我们的nginx lua开发文件会越来越多，我们应该把其项目化，已方便开发。项目目录结构如下所示：</span><br><span class="line">example</span><br><span class="line">example.conf ---该项目的nginx 配置文件</span><br><span class="line">lua ---我们自己的lua代码</span><br><span class="line">test.lua</span><br><span class="line">lualib ---lua依赖库/第三方依赖</span><br><span class="line">*.lua</span><br><span class="line">*.so</span><br><span class="line">其中我们把lualib也放到项目中的好处就是以后部署的时候可以一起部署，防止有的服务器忘记复制依赖而造成缺少依</span><br><span class="line">赖的情况。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们将项目放到到/usr/example目录下。</span><br><span class="line">/usr/servers/nginx/conf/nginx.conf配置文件如下(此处我们最小化了配置文件)</span><br><span class="line">``` bash</span><br><span class="line"><span class="comment">#user nobody;</span></span><br><span class="line">worker_processes <span class="number">2</span>;</span><br><span class="line">error_<span class="built_in">log</span> logs/error.log;</span><br><span class="line">events &#123;</span><br><span class="line">worker_connections <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">include mime.types;</span><br><span class="line">default_<span class="built_in">type</span> text/html;</span><br><span class="line"><span class="comment">#lua模块路径，其中”;;”表示默认搜索路径，默认到/usr/servers/nginx下找</span></span><br><span class="line">lua_package_path <span class="string">"/usr/example/lualib/?.lua;;"</span>; <span class="comment">#lua 模块</span></span><br><span class="line"></span><br><span class="line">lua_package_cpath <span class="string">"/usr/example/lualib/?.so;;"</span>; <span class="comment">#c模块</span></span><br><span class="line">include /usr/example/example.conf;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过绝对路径包含我们的lua依赖库和nginx项目配置文件。</span><br><span class="line">/usr/example/example.conf配置文件如下</span><br><span class="line">``` bash</span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name _;</span><br><span class="line">location /lua &#123;</span><br><span class="line">default_<span class="built_in">type</span> <span class="string">'text/html'</span>;</span><br><span class="line">lua_code_cache off;</span><br><span class="line">content_by_lua_file /usr/example/lua/test.lua;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>lua文件我们使用绝对路径/usr/example/lua/test.lua。</p>
<p>转载自:<br> <a href="http://jinnianshilongnian.iteye.com/blog/2186270" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/2186270</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="环境">环境</h1><p>安装环境<br>安装步骤可以参考<a href="http://openresty.org/#Installation。" target="_blank" rel="external">http://openresty.org/#Ins]]>
    </summary>
    
      <category term="lua" scheme="http://yoursite.com/tags/lua/"/>
    
      <category term="lua" scheme="http://yoursite.com/categories/lua/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown]]></title>
    <link href="http://yoursite.com/2015/11/07/nodejs/"/>
    <id>http://yoursite.com/2015/11/07/nodejs/</id>
    <published>2015-11-07T06:02:51.152Z</published>
    <updated>2015-11-07T06:02:51.074Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>markdown</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="markdown-logo"> </p>
<p>##什么是MarkDown<br>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1_TODO_Todo列表">1 TODO <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="external">Todo列表</a></h3><p>###高亮 [^code]<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="6-_绘制表格">6. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="1-_实时同步预览">1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-_编辑工具栏">2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<p>二、Markdown 语法的简要规则<br>标题</p>
<p><img src="http://cdn.sspai.com/attachment/thumbnail/2014/04/15/620e64aa6522f5eaeb788a8b5f1faa5c10f74_mw_800_wm_1_wmp_3.jpg" alt="markdown"><br>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。</p>
<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><h3 id="三级标题">三级标题</h3><p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。</p>
<p>列表</p>
<p>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3. 符号要和文字之间加上一个字符的空格。</p>
<p><img src="http://cdn.sspai.com/attachment/thumbnail/2014/04/15/a72338b96cf4bfc1dacd610756786ae310f75_mw_800_wm_1_wmp_3.jpg" alt="m2"></p>
<p>引用</p>
<p>如果你需要引用一小段别处的句子，那么就要用引用的格式。</p>
<blockquote>
<p>例如这样</p>
</blockquote>
<p>只需要在文本前加入 &gt; 这种尖括号（大于号）即可</p>
<p><img src="http://cdn.sspai.com/attachment/thumbnail/2014/04/15/07bd8bf6fd38ea7d3bffdc3cae04f6f210f76_mw_800_wm_1_wmp_3.jpg" alt="m3"></p>
<p>图片与链接</p>
<p>插入链接与插入图片的语法很像，区别在一个 !号</p>
<p>插入图片的地址需要图床，这里推荐 CloudApp 的服务，生成URL地址即可。</p>
<p><img src="http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg" alt="m4"></p>
<p>粗体与斜体</p>
<p>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。</p>
<p>例如：这里是粗体 这里是斜体<br>表格</p>
<p>表格是我觉得 Markdown 比较累人的地方，例子如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> Tables        </span>|<span class="string"> Are           </span>|<span class="string"> Cool  </span>|</span><br><span class="line">|<span class="string"> ------------- </span>|<span class="string">:-------------:</span>|<span class="string"> -----:</span>|</span><br><span class="line">|<span class="string"> col 3 is      </span>|<span class="string"> right-aligned </span>|<span class="string"> $1600 </span>|</span><br><span class="line">|<span class="string"> col 2 is      </span>|<span class="string"> centered      </span>|<span class="string">   $12 </span>|</span><br><span class="line">|<span class="string"> zebra stripes </span>|<span class="string"> are neat      </span>|<span class="string">    $1 </span>|</span><br></pre></td></tr></table></figure>
<p>代码框</p>
<p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown 下实现也非常简单，只需要用两个 <code>把中间的代码包裹起来，如</code>code`。图例：<br><img src="http://cdn.sspai.com/attachment/thumbnail/2014/04/15/0135456d6a3c1051f0ed54e37cef070010f78_mw_800_wm_1_wmp_3.jpg" alt="m5"></p>
<p>分割线</p>
<p>分割线的语法只需要另起一行，连续输入三个星号 <em>*</em> 即可</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>markdown</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="markdown-logo"> </p>
]]>
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/categories/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/11/06/hello-world/"/>
    <id>http://yoursite.com/2015/11/06/hello-world/</id>
    <published>2015-11-06T12:00:03.292Z</published>
    <updated>2015-11-06T12:00:03.292Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[辨析 Sass 中的 Map 和 List]]></title>
    <link href="http://yoursite.com/2015/10/21/demo/"/>
    <id>http://yoursite.com/2015/10/21/demo/</id>
    <published>2015-10-21T02:34:12.000Z</published>
    <updated>2015-11-07T01:54:53.962Z</updated>
    <content type="html"><![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p>
<p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p>
<p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p>
<a id="more"></a>
<p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p>
<h2 id="测试表格">测试表格</h2><table>
<thead>
<tr>
<th>Variable</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>site</code></td>
<td>Sitewide information.</td>
</tr>
<tr>
<td><code>page</code></td>
<td>Page specific information and custom variables set in front-matter.</td>
</tr>
<tr>
<td><code>config</code></td>
<td>Site configuration</td>
</tr>
<tr>
<td><code>theme</code></td>
<td>Theme configuration. Inherits from site configuration.</td>
</tr>
<tr>
<td><code>_</code> (single underscore)</td>
<td><a href="http://lodash.com/" target="_blank" rel="external">Lodash</a> library</td>
</tr>
<tr>
<td><code>path</code></td>
<td>Path of current page</td>
</tr>
<tr>
<td><code>url</code></td>
<td>Full URL of current page</td>
</tr>
<tr>
<td><code>env</code></td>
<td>Environment variables</td>
</tr>
</tbody>
</table>
<h2 id="语法比较">语法比较</h2><div class="note"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div>

<h4 id="Map_语法">Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-map: (&#10;&#160; &#160; small: (&#10;&#160; &#160; &#160; &#160; min-width: null,&#10;&#160; &#160; &#160; &#160; max-width: 479px,&#10;&#160; &#160; &#160; &#160; base-font: 16px,&#10;&#160; &#160; &#160; &#160; vertical-rhythm: 1.3&#10;&#160; &#160; ),&#10;&#160; &#160; medium: (&#10;&#160; &#160; &#160; &#160; min-width: 480px,&#10;&#160; &#160; &#160; &#160; max-width: 959px,&#10;&#160; &#160; &#160; &#160; base-font: 18px,&#10;&#160; &#160; &#160; &#160; vertical-rhythm: 1.414&#10;&#160; &#160; ),&#10;&#160; &#160; large: (&#10;&#160; &#160; &#160; &#160; min-width: 960px,&#10;&#160; &#160; &#160; &#160; max-width: 1099px,&#10;&#160; &#160; &#160; &#160; base-font: 18px,&#10;&#160; &#160; &#160; &#160; vertical-rhythm: 1.5&#10;&#160; &#160; ),&#10;&#160; &#160; xlarge: (&#10;&#160; &#160; &#160; &#160; min-width: 1100px,&#10;&#160; &#160; &#160; &#160; max-width: null,&#10;&#160; &#160; &#160; &#160; base-font: 21px,&#10;&#160; &#160; &#160; &#160; vertical-rhythm: 1.618&#10;&#160; &#160; )&#10;);</span><br></pre></td></tr></table></figure>
<h4 id="多重列表语法">多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (&#10;&#160; &#160; (small, null, 479px, 16px, 1.3),&#10;&#160; &#160; (medium, 480px, 959px, 18px, 1.414),&#10;&#160; &#160; (large, 960px, 1099px, 18px, 1.5),&#10;&#160; &#160; (xlarge, 1100px, null, 21px, 1.618)&#10;);</span><br></pre></td></tr></table></figure>
<h2 id="遍历比较">遍历比较</h2><div class="note info"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div>

<h4 id="遍历_Map">遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p>
<p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;&#10;&#160; &#160; $min-width: map-get($map, min-width);&#10;&#160; &#160; $max-width: map-get($map, max-width);&#10;&#160; &#160; $base-font: map-get($map, base-font);&#10;&#160; &#160; $vertical-rhythm: map-get($map, vertical-rhythm);&#10;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="遍历多重列表">遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p>
<p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="慎用多重列表">慎用多重列表</h2><div class="note warning"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div>

<h4 id="遗漏键值">遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (&#10;&#160; &#160; (small, null, 479px, 16px, 1.3),&#10;&#160; &#160; (medium, 480px, 959px, 18px, 1.414),&#10;&#160; &#160; (large, 960px, 1099px, 18px, 1.5),&#10;&#160; &#160; (xlarge, 1100px, 21px, 1.618)&#10;);&#10;&#10;p &#123;&#10;&#160; &#160; @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;&#10;&#160; &#160; &#160; &#160; @if $min-width &#123;&#10;&#160; &#160; &#160; &#160; &#160; &#160; @include breakpoint( $min-width ) &#123;&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; font-size: $base-font;&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; line-height: $vertical-rhythm;&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#125;&#10;&#160; &#160; &#160; &#160; &#125; @else &#123;&#10;&#160; &#160; &#160; &#160; &#160; &#160; font-size: $base-font;&#10;&#160; &#160; &#160; &#160; &#160; &#160; line-height: $vertical-rhythm;&#10;&#160; &#160; &#160; &#160; &#125;&#10;&#160; &#160; &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p>
<p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p>
<h4 id="查找特定列表">查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure>
<p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@function get-list($label) &#123;&#10;&#160; &#160; @each $list in $breakpoint-list &#123;&#10;&#160; &#160; &#160; &#160; @if nth($list, 1) == $label &#123;&#10;&#160; &#160; &#160; &#160; &#160; &#160; @return $list;&#10;&#160; &#160; &#160; &#160; &#125;&#10;&#160; &#160; &#125;&#10;&#160; &#160; @return null;&#10;&#125;&#10;$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure>
<p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p>
<h4 id="缺少原生的_Map_函数">缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p>
<p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p>
<h2 id="总结">总结</h2><div class="note unreleased"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div>

<p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p>
<p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p>
<p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p>]]>
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
